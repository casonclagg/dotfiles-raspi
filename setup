#!/usr/bin/env bash
# vim: filetype=sh
#
# Install my dev environment including vim, dotfiles, go, node, and ui stuff

TMP_FILE_PREFIX=${TMPDIR:-/tmp}/prog.$$
GOLANG_VERSION="1.14"
PYTHON_VERSION="3.8.3"

DEFAULT_APT_PACKAGES="
apt-utils
build-essential
curl
playerctl
fonts-font-awesome
fonts-powerline
git
jq
wget
vim
"

DEFAULT_VIM_PLUGINS="
tpope/vim-fugitive
tpope/vim-unimpaired
tpope/vim-surround
scrooloose/nerdtree
scrooloose/nerdcommenter
kien/ctrlp.vim
rking/ag.vim
majutsushi/tagbar
milkypostman/vim-togglelist
vim-airline/vim-airline
vim-airline/vim-airline-themes
elzr/vim-json
digitaltoad/vim-jade
fatih/vim-go
vim-ruby/vim-ruby
elixir-lang/vim-elixir
avakhov/vim-yaml
shime/vim-livedown
leafgarland/typescript-vim
editorconfig/editorconfig-vim
"

function usage() {
  echo "Usage: init [OPTION]
  -f          full (install everything)
  -m          minimal install (just vim)
  "
}

# TODO - Test this
function install_random() {
  pip install --upgrade pip
  sudo apt install -y exfat-utils exfat-fuse
  # Not sure I need to do this....
  sudo apt remove -y --purge alsa-base alsa-utils pulseaudio indicator-sound
  sudo apt install -y alsa-base alsa-utils pulseaudio indicator-sound
  sudo apt install -y audacity
  sudo apt install -y openscad
  sudo apt install -y numlockx
  sudo alsa force-reload

  # Install VLC & ImageMagick
  sudo apt install -y imagemagick vlc
  
  # networking
  sudo apt install -y netcat

  # Install powerline
  pip install powerline-shell
  
  # Install youtube downloader
  # pip install youtube-dl
  sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp
  sudo chmod a+rx /usr/local/bin/yt-dlp
  
  # Install nonsense
  sudo apt install -y ruby
  sudo gem install lolcat
  sudo apt install -y figlet cowsay fortune
  figlet noice! | lolcat

  # make nautilus not stupid
  sudo apt remove -y nautilus-share
  sudo apt install -y nautilus-share
  mkdir -p /var/lib/samba/usershares

  # install OBS
  sudo apt install -y ffmpeg 

  # Firewall
  sudo ufw enable
  sudo ufw status

  # Other things
  sudo apt install -y net-tools rhash nginx

  echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null

  sudo apt install -y git-lfs
  sudo apt install -y ncdu
}

function install_apt_packages() {
  for apt_pkg in $@; do
    if ! $(dpkg -s $apt_pkg &> /dev/null); then
      sudo DEBIAN_FRONTEND=noninteractive apt install -qq -y $apt_pkg
    fi
  done
}

function install_vim_plugins() {
  mkdir -p ~/.vim/autoload ~/.vim/bundle
  # make sure we have pathogen
  if [ ! -e ~/.vim/autoload/pathogen.vim ]; then
    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
  fi

  # install all the plugins
  for plugin in $@; do
    local plugin_name="${plugin##*/}"

    if [ ! -d $HOME/.vim/bundle/$plugin_name ]; then
      git clone --depth=1 "https://github.com/$plugin" "$HOME/.vim/bundle/$plugin_name"
    fi
  done
}

function _has() {
  if $(type -t "$1" &> /dev/null); then 
    return 0 
  fi 
  return 1
}

function install_python() {
  if ! _has pyenv; then
    # Install python deps
    install_apt_packages "make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git"

    curl -LSs https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
    {
      echo 'export PATH="$HOME/.pyenv/bin:$PATH"'
      echo 'eval "$(pyenv init -)"'
      echo 'eval "$(pyenv virtualenv-init -)"'
    } >> "$HOME/.bash_local"

    export PATH="$HOME/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"

    pyenv install ${PYTHON_VERSION} && pyenv global ${PYTHON_VERSION}
  fi

  if _has pip && ! _has http; then
    pip install httpie httpie-jwt-auth
  fi
}

function install_ctags() {
  if ! _has ctags; then
    git clone -q --depth=1 https://github.com/universal-ctags/ctags.git /tmp/ctags
    install_apt_packages autotools-dev autoconf pkg-config
    cd /tmp/ctags
    ./autogen.sh
    ./configure
    make
    sudo make install
    cd -
    rm -rf /tmp/ctags
  fi

  install_vim_plugins "ludovicchabant/vim-gutentags.git"
}

function install_dotfiles() {
  if [ ! -d "$HOME/.homesick/repos/homeshick" ]; then 
    git clone --depth=1 https://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick
    echo 'source $HOME/.homesick/repos/homeshick/homeshick.sh' >> ~/.bash_local
    source $HOME/.homesick/repos/homeshick/homeshick.sh
    yes | homeshick clone -b casonclagg/dotfiles-raspi
    yes | homeshick link dotfiles-raspi
  fi
}

function install_uiapps() {
  install_apt_packages "i3 pavucontrol scrot xclip vim-gnome fonts-powerline"

  # google chrome
  if ! _has google-chrome; then
    # TODO I think theres a snap
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
    sudo apt update
    sudo apt install -y google-chrome-stable
    echo "BROWSER=$(which google-chrome)" >> ~/.bash_local
  fi

}

function install_vscode() {
  if ! _has code; then
    # set up the microsoft repo
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
    sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

    # install code
    sudo apt update
    sudo apt install -y code

    # install all the extensions
    VSCODE_EXTENSIONS="
    dbaeumer.vscode-eslint
    eamodio.gitlens
    ms-python.python
    ms-vscode.wordcount
    christian-kohler.path-intellisense
    EditorConfig.EditorConfig
    mikestead.dotenv
    "
    for ext in $VSCODE_EXTENSIONS; do
      code --install-extension $ext
    done
  fi
}

function install_docker() {
  if ! _has docker; then
    sudo apt install -y docker.io

    distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
    curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
    curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

    sudo apt update && sudo apt install -y nvidia-container-toolkit
    sudo systemctl restart docker

    # Setup docker group - https://docs.docker.com/engine/install/linux-postinstall/
    sudo groupadd docker
    sudo usermod -aG docker $USER
    # su ${USER}
    sudo systemctl restart docker

    # install nvidia-docker2
    distribution=ubuntu18.04 && \
    curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -    && \ 
    curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
    sudo apt-get update
    sudo apt-get install -y nvidia-docker2
    sudo systemctl restart docker
    
    sudo apt install -y nvidia-utils-470 nvidia-cuda-toolkit
  fi
}

function setup_locale() {
  # Check if en_US.UTF-8 locale is available
  if ! locale -a | grep -q "en_US.utf8"; then
    # Generate en_US.UTF-8 locale
    sudo locale-gen en_US.UTF-8
  fi

  # Ensure the locale settings are properly configured
  sudo tee /etc/default/locale > /dev/null <<EOF
LANG="en_US.UTF-8"
LANGUAGE="en_US:en"
LC_ALL="en_US.UTF-8"
EOF

  # Apply the locale settings
  sudo update-locale LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
}

function main() {
  PACKAGES="python dotfiles"
  local -r OPTS=':hfm'
  while builtin getopts ${OPTS} opt "${@}"; do

    case $opt in
      h) usage ; exit 0
        ;;

      f) # 
        PACKAGES="${PACKAGES} uiapps vscode random"
        ;;

      m) # minimal
        PACKAGES=""
        ;;


      \?)
        echo ${opt} ${OPTIND} 'is an invalid option' >&2;
        usage;
        exit ${INVALID_OPTION}
        ;;
    esac
  done

  # update apt packages
  sudo apt update -q

  # upgrade everything (no balls)
  sudo apt upgrade -y

  setup_locale

  install_apt_packages "${DEFAULT_APT_PACKAGES}"

  for pkg in ${PACKAGES}; do
    if _has "install_$pkg"; then
      install_$pkg
    fi
  done

  install_vim_plugins "${DEFAULT_VIM_PLUGINS}"

  exit 0
}


main "$@"

echo "---------------------------------------------------"
echo "All finished. You'll want to source your bashrc."
echo "$ source ~/.bashrc"

